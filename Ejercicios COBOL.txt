
   ***  Programas BASICOS con COBOL  ***********

   ANTES DE HACER PROGRAMAS CON FUNCIONALIDADES MÁS NORMALES, HAREMOS VARIOS DE PRUEBA PARA 
   FAMILIARIZARNOS CON ALGUNOS ASPECTOS DE    COBOL.

   ****  PRUEBA01 ******************************************************
   *********************************************************************
 1.-  Declara tres variables WS-VAR1... WS-VAR3, numéricas. 
      Define cada una con un formato numérico editable diferente.
      Declara también una constante: CT-DIEZ-MIL con el valor 10000.	
      Inicialízalas en el párrafo INICIO.

 2.-  En el proceso mueve CT-DIEZ-MIL a WS-VAR1.
      Después mueve WS-VAR1 a WS-VAR3.
      Suma el valor de WS-VAR1 a WS-VAR3 y almacénalo en WS-VAR2.
   
 3.-  En el FIN, displaya el valor de cada variable por separado.
     
   ****  PRUEBA02 ******************************************************
   *********************************************************************
   PARTE 1. (USO DE BUCLES)

      QUEREMOS HACER UN DISPLAY EN EL QUE SE MUESTREN LOS NÚMEROS 
       DEL 10000 AL 11000 (EN INCREMENTOS DE 100).

      ANTES DE MOSTRAR EL NÚMERO, MUEVELO A DOS VARIABLES DEFINIDAS COMO:
        05  WS-NUMEROS.
            10 WS-NUMX               PIC   ZZZ,ZZ9.      
            10 WS-NUM4               PIC   999,999.      
            10 WS-NUM5               PIC    9(8) COMP-3.      
            10 WS-NUM6               PIC    9(6) BINARY / COMP-4.

      .... Y YA DESPUÉS HACES LOS DISPLAYS.

   PARTE 2.
	AGREGAR AL PROGRAMA, EN LA ENVIRONMENT DIVISION, DESPUES DE LA 
        CONFIGURATION SECTION:

        SPECIAL-NAMES.
	DECIMAL-POINT IS COMMA.
	SYSIN         IS SYSIN.

        VUELVE A EJECUTAR Y COMPRUEBA LA DIFERENCIA CON LA PRIMERA PARTE.
                   
   ****  PRUEBA03 ******************************************************
   *********************************************************************

 1A.-  TOMAR LA FECHA DEL SISTEMA CON UN ACCEPT.       
      EN EL INICIO HACER EL "ACCEPT .... FROM DATE" QUE NOS 
      DEVUELVE LA FECHA CON EL FORMATO PEDIDO. 
      DESCOMPONER Y MOSTRAR CON DISPLAYS EL AÑO, MES Y DIA.
       	
 2A.- HACER UN DISPLAY DE LA FECHA EN FORMATO:  DD/MM/YYYY.
 
   ****  PRUEBA04 ******************************************************
   *********************************************************************

  1.- SOBRE EL PROGRAMA ANTERIOR AÑADIR UN IF EN EL PROCESO.
 	   SI EL MES ES 01, DEBE MOSTRAR "ENERO".
	   SI NO, QUE NO MUESTRE NADA.


   ****  PRUEBA04 ******************************************************
   *********************************************************************
	AGREGAR AL PROGRAMA, EN LA ENVIRONMENT DIVISION, DESPUES DE LA 
        CONFIGURATION SECTION:

        SPECIAL-NAMES.
	DECIMAL-POINT IS COMMA.
	SYSIN         IS SYSIN.
      
        1.- EN EL PARRAFO INICIO, AÑADE UNA SENTENCIA PARA TOMAR UN VALOR         DE SYSIN.

	   ACCEPT   .... FROM SYSIN 

        2.- EL VALOR ACEPTADO DEBES GUARDARLO EN UNA VARIABLE X(10).

	3.- VAMOS A AÑADIR VARIOS IF PARA TESTEAR DIFERENTES COSAS:
       	 - SI EL VALOR INTRODUCIDO ES NUMÉRICO MUESTRA: "ES UN NÚMERO"
	     - SI EL VALOR ES ALFABÉTICO  MUESTRO : "ES UNA LETRA"
	     - SI EL VALOR ES OTRA COSA MUESTRA: "ES UN CARACTER ".

	4.- AL EJECUTAR EL PROGRAMA, TE PIDE QUE LE INTRODUZCAS UN VALOR.         HAZ VARIAS EJECUCIONES CON DIFERENTES VALORES PARA PROBAR TODAS LAS       CASUÍSTICAS.

   ****  PRUEBA05 ******************************************************
   *********************************************************************

        6.- EN ESTE PROGRAMA VAMOS A REALIZAR DIFERENTES CÁLCULOS ARITMÉTICOS.
 	PARA ELLO USAREMOS LA SENTENCIA ACCEPT WS-.... FROM SYSIN.
	
	EL PROGRAMA DEBE ACEPTAR UN PAR DE VALORES POR "SYSIN".

	CON ESOS DOS VALORES DEBES REALIZAR LAS SIGUIENTES ACCIONES:

	- VALIDAR QUE SON VALORES NUMÉRICOS.

	- MOSTRAR LA SIGUIENTE INFORMACIÓN (HACIENDO LOS CÁLCULOS QUE PRECISES):
		A- NUMERO1  POR    NUMERO2  SON NUMERO3 
		B- NUMERO1  ENTRE  NUMERO2  SON NUMERO3 Y SU RESTO ES NUMERO4
		C- NUMERO1  MÁS    NUMERO2  SON NUMERO3 
		D- NUMERO1  MENOS  NUMERO2  SON NUMERO3 
         	(RECUERDA QUE LAS VARIABLES DEL PROGRAMA DEBES DEFINIRLAS COMO 
          		WS-NUM... )

        - PRESENTA EL RESULTADO DE LA SIGUIENTE FORMA:
		A- +1234,34
		B- 1234,34+
		C- 00001234,34 
		D- +0001234,34 € 
		

   ****  PRUEBA06 ******************************************************
   *********************************************************************

        7.- USANDO EL PROGRAMA ANTERIOR (PRUEBA05), VAMOS A HACER UN PROCESO	
	    QUE HAGA EL SIGUIENTE ALGORITMO (A PARTIR DE DOS NUMEROS):
	        - DIVIDE NUMERO1 ENTRE NUMERO2
		- SI NUMERO2 ES MAYOR QUE DOS, VUELVE A DIVIDIR EL RESULTADO
		  ENTRE NUMERO2.
		- EN CADA ITERACION HACER UN DISPLAY DE LOS TRES NUMEROS
		  (DIVISOR, DIVIDENDO Y COCIENTE).
		- SI NUMERO2 NO ES MAYOR QUE DOS. PARA EL BUCLE.


   ***************************************************************** 
   ***  Programas "Normales" con COBOL                            **
   ***  Los siguientes programas emulan el uso habitual de COBOL  **
   ***  en cualquier instalación de un cliente final.		  **	
   ***************************************************************** 

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
X    1.-  COBOL200. 
X   Objetivos: 
X
X      Lectura y manejo de ficheros
X
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

     Fichero de entrada:  FICHERO.EMPLEADO

     Fase 1.
     Abrir el fichero, leer una fila, hacer un DISPLAY del registro y cerrar.

     Cuando se produzca un error:
	 	   DISPLAY '*********************************************' 
           hacer DISPLAYS de "ERROR OPEN FICHERO " o "ERROR LEER FICHERO"-
		   DISPLAY '*********************************************' 
     
     En el párrafo FIN, mostrar las estadísticas del programa:
       - Número de filas leidas.	 

     Fase 2.
     Abrir el fichero, leer todas las filas y cerrar.
     En el proceso hacemos un DISPLAY de cada nombre y numero de empleado.
     NUM. EMPLEADO    : 000150
     NOMBRE EMPLEADO  : LUCIA.
     SALARIO EMPLEADO : 000000750,00
     COMSION EMPLEADO : 000000050,00
	 
     Además mostramos estadísticas y gestionamos errores.

     Fase 3.
        Contabilizar cuandos empleados trabajan en los departamentos 
        cuya primera letra es 'A' ó 'B' ó 'D' ó el resto. 

     Fase 4:
        Gestión de errores.
        Después de un error se debe parar el programa.
        Para ello crearemos un párrafo 9100-GESTION-ERROR
        desde el cuál se harán los displays y se parará el programa
        (llamando para ello al párrafo 8000-FIN).
        Para hacer los displays deberemos usar variables y literales
        con el fin de conseguir este tipo de mensaje:

         **********************************************
         **   ERROR EN EL PROGRAMA : XXXXXXXXXXXXXX   *
         **   PARRAFO DEL ERROR    : XXXXXXXXXXXXXX   *
         **   OPERACION            : XXXXXXXXXXXXXX   *
         **   FICHERO              : XXXXXXXXXXXXXX   *
         **   FILE STATUS          : XX               *
         **********************************************
       
        
        9100-GESTION-ERROR.

            DISPLAY '**********************************************'
            DISPLAY '**   OPERACION       : '   WS-OPERACION
    
 
        

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
X    2.-  COBOL300. 
X   Objetivos: 
x -  a partir de un fichero de entrada generar dos ficheros de salida. 
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

     Fichero de entrada:  FICHERO.EMPLEADO

     SALIDA1:  Empleados con primera letra del primer apellido
               menor que 'M'.
     SALIDA2:  Resto empleados.

     Formato de los ficheros:

     SALIDA1:  
        NOMBRE - INICIAL - APELLIDO - SALARIO - COMISION - CODEPT - FECHA DIA 
     LOS CAMPOS NUMERICOS EN LOS FICHEROS TENDRAN FORMATO COMP-3.

     SALIDA2:  
        NUEMPL - NOMBRE - APELLIDO - CODEPT - SALARIO - FECHA DIA
     LOS CAMPOS NUMERICOS EN LOS FICHEROS TENDRAN FORMATO NORMAL.

     FECHAS EN FORMATO AAAAMMDD

     MOSTRAR ESTADISTICAS AL FINALIZAR EL PROGRAMA.
	 
     Gestión de errores: cuando aparece un error debemos parar el programa
	y enviar un mensaje significativo. Desde el párrafo de error se harán 	todos los displays. El programa se parará en el FIN.
	  
     Mostrar en las estadísticas, además de los registros totales
	del fichero, los datos contabilizados ahora.

*************************************************************
***    ESTADISTICAS DEL PROGRAMA  XXXXXXX                   *
***  REGISTROS POR FICHERO:                                 * 
***  LEIDOS   FICHERO ENTRADA:     nnnnnnnn                 *
***  ESCRITOS FICHERO SALIDA1:     nnnnnnnn                 *
***  ESCRITOS FICHERO SALIDA2:     nnnnnnnn                 *
*************************************************************

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
X    2.-  COBOL900. 
X   Objetivos: 
X
x -  Programa que invoca a la rutina RUTEMPL1 para saber el sexo del empleado. 
X   
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

     Fichero de entrada:  FICHERO.EMPLEADO
     
     Por cada registro de empleado, llama a la rutina dándole el NUEMPL 
     y esta devuelve el género del empleado.

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
X
X    2B. OPCIONAL -  RUTEMPL1.
X   Objetivos: 
x -  Rutina de consulta del género de un empleado. 
X    Recibe como parámetro de entrada el código de consulta y el número de 
X    empleado.
X
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

     Uso de copys:
         CP_RUTEMPL1.cpy

   La rutina RUTEMPL1 recibirá en la copy CP_RUTEMPL1.cpy los parám. de llamada.

   Tipo de llamada:
    'C' - Consulta
    El campo código de empleado vendrá informado.
    La rutina devuelve el código de retorno y el género del empleado, que será 'F' ó 'M'.
    Funcionalidad de la rutina:
     " - Si el número de empleado es par devolvemos 'F' y si es impar 'M'. 
     " - Si el número es múltiplo de 13 devolverá error "XXXXX".

    Códigos de retorno:
    00 - OK
    01 - Cód. empleado vacío.
    02 - Cod. empleado erróneo.
    03 - Tipo de llamada erróneo.
    04 - Error XXXXX.

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
X
X    3.-  COBOL350.
x 
X   Objetivos: 
x -  Gestión de tablas de memoria/working/internas y sentencia SEARCH
X    (NIVEL: Medio)
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

  Puedes tomar como plantilla un programa sencillo -que funcione-.
  Queremos incorporar una copy con los datos de los departamentos.
  Luego, redefiniremos esos datos con una tabla de memoria. 

  Fase 1.-
  Comprueba los datos de la copy y haz un primer display del registro 7.
  Ahora muestra el nombre del departamento 17 -con otro display-.

  Fase 2.- (SEARCH)
  Vas a utilizar la sentencia SEARCH para buscar un código de departamento.
  Con un ACCEPT debes tomar por consola el código de departamento y hacer un 
  DISPLAY del nombre. 

  Fase 3.- (SEARCH ALL)
  Lo mismo que en la fase 2, pero ahora con un SEARCH ALL.


XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
X    4.-  COBOL400. (MOMENTO ADAPTACIÓN A PROYECTO)
X   Objetivos: A partir del fichero empleado, escribir en tres ficheros X   diferentes los empleados que :
X     - Ganan menos de 10.000       (fichero SALARIOA)
X     - Ganan entre 10.000 y 20.000 (fichero SALARIOB)
ºX     - Ganan más de 20.000         (fichero SALARIOC)
X   Se consideran ganancias a la suma del salario más la comisión. 
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
     Ficheros:
     fichero.empleado
     salarioa: Empleados que ganan menos de 10.000       
     salariob: Empleados que ganan entre 10.000 y 20.000
     salarioc: Empleados que ganan más de 20.000       

     Formato de los tres ficheros:   NOMBRE - INICIAL - APELLIDO - SALARIO - COMISION - CODEPT - FECHA (FORMATO DDMMYYYY).
   En lugar de especificar el formato de cada registro de salida, usaremos una misma copy para los tres .... ¿cómo?
   COPY salidax REPLACING ==:NNN:== BY ==WS-SAL1==.

     MOSTRAR ESTADISTICAS AL FINALIZAR EL PROGRAMA.
*************************************************************
***    ESTADISTICAS DEL PROGRAMA  XXXXXXX                   *
***  REGISTROS POR FICHERO:                                 * 
***  LEIDOS   FICHERO ENTRADA:     nnnnnnnn                 *
***  ESCRITOS FICHERO SALARIOA:    nnnnnnnn                 *
***  ESCRITOS FICHERO SALARIOB:    nnnnnnnn                 *
***  ESCRITOS FICHERO SALARIOC:    nnnnnnnn                 *
*************************************************************

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
X
X    5.-  COBOL450.
x 
X   Objetivos: 
x -  Modificar el programa COBOL300 para agregar en la salida de los ficheros
X    la descripción del departamento.
X  
X    (NIVEL: Medio)
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

  Primero debes incorporar una copy con los datos de los departamentos y 
  redefinir esos datos con una tabla de memoria. 

  En cada uno de los ficheros de salida debes hacer lo siguiente:
   - Tomar el código de departamento
   - Buscarlo en la tabla de memoria
   - Agregar la descripción del departamento a cada fichero de salida.



XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
X    6.-  COBOL500.
x 
X   Objetivos: 
x -  Cruce de ficheros.
X
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

     Ficheros de entrada:  FICHERO.EMPLEADO
			   FICHERO.EMPLEADO.CRUCE

     Ficheros de salida :  FICHERO.EMPLEA
			   FICHERO.EMPLEB
			   FICHERO.EMPLE.AMBOS

  El banco A se ha fusionado con otro -Banco B- y los empleados pueden tener 
  un código de empleado repetido.  
  Vamos a leer los empleados del fichero FICHERO.EMPLEADO -que contiene los 
  empleados del Banco A- y el fichero FICHERO.EMPLEADO.CRUCE -que contiene los 
  empleados del Banco B-. 
  Debemos comparar los registros de ambos ficheros y producir tres ficheros de    salida:  
     FICHERO.EMPLEA: empleados del Banco A que tiene un cód. empleado único
     FICHERO.EMPLEB: empleados del Banco B que tiene un cód. empleado único
     FICHERO.EMPLE.AMBOS:  empleados que tienen el cód. empleado repetido.

  El fichero FICHERO.EMPLE.AMBOS tendrá un registro con:
   -  número de empleado
   -  el resto de los campos del fichero FICHERO.EMPLEADO 
   -  más todos los campos del fichero   FICHERO.EMPLEADO.CRUCE.

  El resto de ficheros tendrá la misma estructura del fichero FICHERO.EMPLEADO. 
 	

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
X
X    7.-  RUTI0720.
X   Objetivos: 
x -  Rutina de asignación de nombre de departamento.
X    Esta rutina recibe como parámetro el código de departamento y
X    devuelve el nombre de departamento.
X
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
     Uso de copys:
         CP_COD_DEPART.cpy
         CP_RUTIN0720.cpy

   La rutina RUTI0720 recibirá en la copy CP_RUTI0720.cpy los parám. de llamada.

   Tipo de llamada:
    'C' - Consulta
    El campo código de departamento vendrá informado.
    La rutina devuelve el nombre del departamento.
    Para recuperar el nombre del departamento se usa una tabla de memoria junto con la copy COD_DEPART.cpy.

    Códigos de retorno:
      CP0720-RETURN-CODE - CP0720E-MESSAGE
                      00 - OK
                      01 - Cód. departamento vacío.
                      02 - Nombre de departamento no encontrado.		
                      03 - Tipo de llamada erróneo.	
    XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
X
X    8.-  COBOL700.
x 
X   Objetivos: 
x -  Este programa lee el fichero de empleados y genera un fichero nuevo
X    de empleados.
X
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

     Ficheros:
     ENTRADA: fichero.empleado
     SALIDA : fichero.empleado.depart
              NUEMPL-NOMBRE-APELLIDO-COD_DEPT-NOMBRE_DEPARTAMENTO

     El programa lee el fichero ENTRADA y por cada empleado deberá llamar a
     la rutina RUTI0720 informando el código de departamento para recuperar
     el nombre del departamento.

     En el fichero de SALIDA se reflejarán los empleados con el nombre de 
    departamento recuperado de la rutina.
     Si la rutina no muestra ningún nombre, en el fichero se indicará:
      ' SIN DESCRIPCION '.
 


    
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
X
X    4.-  COBOL600.	
x 
X   Objetivos: 
x -  Gestión de tablas de memoria y sentencia SEARCH 
X    (NIVEL: Alto)
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

  Vamos a decodificar el código de departamento.
 
  Para ello tenemos un fichero llamado:  
    FICHERO.CODEPART 
  que contiene el codigo y la descripcion del departamento.

  (Partiendo del programa COBOL300 que leía empleados y escribía
   los ficheros SALIDA1 y SALIDA2)     

  Para ello  haremos lo siguiente:
  - En el INICIO leeremos el fichero CODEPART y lo "volcaremos" en 
  una tabla de memoria.

  - Durante el proceso, cada vez que vayamos a escribir en SALIDA2,
  "decodificaremos" el código del departamento para mostrar en su lugar 
  la descripción del departamento.  
 
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
X
X    4.5 .-  COBOL650.
x 
X   Objetivos: 
x -  Gestión de tablas de memoria y sentencia SEARCH 
X    Modificación sobre el programa COBOL600
X    (NIVEL: Alto)
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

  Vamos  a realizar una modificación sobre el programa COBOL600 anterior que
  hacía una carga de un fichero en memoria y luego usaba la tabla de memoria 
  para decodificar el código de departamento.

  Ahora vamos a usar como fichero para cargar en memoria, el fichero     
    FICHERO.CODEPART.CAMBIO que contiene además el jefe del departamento. 
 
  La modificación del programa consiste en:  
    - En el fichero SALIDA2, en lugar del nombre del departamento mostramos 
      el jefe del depart.
   

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
X
X    5.-  COBOL700.
x 
X   Objetivos: 
x     -  Cruce de ficheros.
X
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

     Ficheros de entrada:  FICHERO.EMPLEADO
			   FICHERO.CODEPART

     Ficheros de salida :  FICHERO.EMPLE.DEPART
			   FICHERO.EMPLE.SIN
			   FICHERO.DEPART.SIN

  Queremos cruzar los ficheros de entrada por el código de departamento. 
  Debemos comparar los registros de ambos ficheros y producir tres ficheros de  
  salida:  
     FICHERO.EMPLE.DEPART: empleados con el cód. departamento en CODEPART.
     FICHERO.EMPLE.SIN   : empleados que su cód. departamento no está en CODEPART.
     FICHERO.DEPART.SIN  : Departamentos que no están en empleados.

     El fichero FICHERO.EMPLE.DEPART tendrá un registro similar al FICHERO.EMPLEADO más la descripción del departamento al final del fichero.     	 
     El fichero FICHERO.EMPLE.SIN  tendrá un registro similar al FICHERO.EMPLEADO más el texto "NO EXISTE EL DEPARTAMENTO" al final del fichero.     	
     El fichero FICHERO.DEPART.SIN tendrá un registro similar al FICHERO.CODEPART más el texto "SIN EMPLEADOS" al final del fichero.     	

     El programa debe hacer un control de errores después de cada interacción con ficheros/tablas/rutinas.
     Se debe mostrar una estadística completa de ejecución al final del programa.

   *********************************************************************
   *********************************************************************
   ***  Programas COBOL con SQL  ***********
   *********************************************************************
   *********************************************************************

   La extensión de estos programas será .sqb

   ****  COBS900.sqb ******************************************************
   *  Vamos a construir un programa que tome como parámetro un número de    *    empleado y lo busque en la tabla de empleados.
   *********************************************************************

    Nuestro programa accederá a la tabla EMPLOYEE -el instructor te dirá donde esta-.
    
    Le pasaremos al programa como parámetro un número de empleado de 6 bytes. 

    El programa hará una SELECT a la table EMPLOYEE con ese número de empleado y devolverá el NOMBRE, APELLIDO, DEPT y SALARIO del empleado.
  
    Debes agregar la SQLCA a tu programa.
   
    Si la "copy" de la tabla de empleados no está lista... deberás agregar las tres variables "a mano" (NOMBRE, APELLIDO, DEPT y SALARIO).

   ****  COBS905.sqb ******************************************************
   *  A partir del COBS900.sqb, construimos un programa que reciba por
   * consola (ACCEPT) dos parámetros: tipo de operación y numero de    *  empleado.
   *********************************************************************
      Si el tipo de operación es 'S' (SELECT) el programa devuelve 
      todos los campos del empleado.
      Si el tipo de operación es 'U' (UPDATE) el programa incrementa 
      el salario un 60%.
      Si el tipo de operación es 'D' (DELETE) el programa actualiza el             empleado para poner a espacios el nombre y el apellido. 

--- Agregamos una nueva columna a dos tablas para hacer los updates más realistas ---------

su - db2inst1
-pass: forma2 -
db2 connect to sample
db2 alter table DB2INST1.EMPLOYEE   add TIMESTAMP TIMESTAMP;
db2 alter table DB2INST1.DEPARTMENT add TIMESTAMP TIMESTAMP;
exit 
(vuelve al usuario forma2)
db2 describe table db2inst1.employee
db2 update db2inst1.employee   set timestamp = current timestamp;
db2 update db2inst1.department set timestamp = current timestamp;

   ****************** para gestionar nulos  *********************
 db2 "update db2inst1.employee  set phoneno = NULL where empno in   ('000100','000200','000300')";

     EXEC SQL  . . . 
         INTO :cm INDICATOR :cmind 
                . . 
     END-EXEC

     EXEC SQL  . . . 
         INTO :cm :cmind 
                . . 
     END-EXEC
     IF cmind LESS THAN 0
          DISPLAY 'Commission is NULL'



   *********************************************************************
   ****  COBS910.sqb ******************************************************
   *  Este programa ACCEPTa un código de departamento y devuelve
   *  el nombre, apellido y teléfono del director, junto al nombre del proyecto (PROJNAME) que tenga el mayor PROJNO de aquellos que corresponden a
   * nuestro Departamento.
   *********************************************************************
   *********************************************************************

    Nuestro programa accederá a las tablas DEPARTMENT y PROJECT.
    
    Le pasaremos al programa como parámetro un código de departamento de 3 bytes. 

    El programa hará una SELECT a la table DEPARTMENT con ese número de departamento y recuperará el director.

    Con el director leerá en EMPLOYEE el nombre, apellido y tlf del director.

    Con el código de departamento, accederá a PROJECT y de los proyectos de este departamento recuperará el nombre del que tenga el mayor PROJNO.

    Finalmente el programa mostrará todo con displays.
    
    Debes agregar la SQLCA a tu programa.
   
    Recuerda hacer controles de error después de cada llamada a la base de datos.
  
   *********************************************************************
   ****  COBS920.sqb ******************************************************
   *  Este programa ACCEPTa un código de departamento (ADMRDEPT).
   *   y devuelve para ese ADMRDEPT todos los departamentos que le reportan
   *********************************************************************
   *********************************************************************

    Nuestro programa accederá a la tabla DEPARTMENT con un cursor.
    
    Le pasaremos al programa como parámetro un código de departamento de 3 bytes. 

    El programa hará un cursor sobre la tabla DEPARTMENT con ese número de departamento       de administración y recuperará el código  y el nombre de departamento.

    Hará un DISPLAY por cada departamento.
 
    Muestra las estadísticas del programa.
    
    Recuerda hacer controles de error después de cada llamada a la base de datos.





